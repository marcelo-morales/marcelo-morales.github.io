I"Í)<div class="sidebar">
	<b>Responsibilities:</b>
	<br />‚Ä¢ Prepare and lead weekly lab and tutorial activities, with mini lectures to solidify core concepts
	<br />‚Ä¢ Hold weekly office hours
	<br />‚Ä¢ Provide answers to student questions on online discussion forum
	<br />‚Ä¢ Grade weekly tutorials, assignments, and examinations
</div>

<h2 id="teaching-assistant--the-university-of-british-columbia">Teaching Assistant @ The University of British Columbia</h2>

<p>I taught 4 semesters of <a href="https://courses.students.ubc.ca/cs/courseschedule?pname=subjarea&amp;tname=subj-course&amp;dept=CPSC&amp;course=110">CPSC 110 (Computation, Programs, and Programming)</a>, the introductory course to programming concepts at the University of British Columbia between September 2016 and December 2018.</p>

<p>As of January 2019, I decided to try my hand at TAing for an upper-level course instead, and since I enjoyed <a href="https://courses.students.ubc.ca/cs/courseschedule?pname=subjarea&amp;tname=subj-course&amp;dept=CPSC&amp;course=304">CPSC 304 (Introduction to Relational Databases)</a>, this was my first choice. I‚Äôm really excited to solidify my understanding of relational databases by sharing my knowledge and experience with students!</p>

<h3 id="about-cpsc-110">About CPSC 110</h3>

<p>This course is a required course for all students interested in majoring in Computer Science and related degrees, and remains one of the most popular courses at the university. In the 2018-19 school year, 1607 students were registered in the course, with many more on waitlists. For perspective, around 12000 students were accepted to an undergraduate program that year.</p>

<p>Being a Teaching Assistant for this course is an experience unlike any other: not only is the number of students taking the course each year enormous, it also allowed me to connect with students from diverse backgrounds, from experienced programmers to those without any knowledge of tech. At UBC, you‚Äôre required to take CPSC 110 <a href="https://www.cs.ubc.ca/students/undergrad/prospective/how-apply">before applying to major</a> in Computer Science, so it was interesting working with students who are still gauging their interests and abilities in computer science.</p>

<p>The course itself covers the core concepts of computer science, using <a href="https://racket-lang.org/">Racket</a>, a general-purpose programming language in the Lisp-Scheme family. Racket is also used in the upper level <a href="https://courses.students.ubc.ca/cs/courseschedule?pname=subjarea&amp;tname=subj-course&amp;dept=CPSC&amp;course=311">CPSC 311 (Programming Languages)</a>, since its macro facilities make it simple to write language parsers and interpreters.</p>

<p>Topics covered include:</p>
<ul>
  <li>HtDF: How to Design Functions</li>
  <li>HtDD: How to Design Data</li>
  <li>HtDW: How to Design Worlds</li>
  <li>Recursion</li>
  <li>Helper functions</li>
  <li>Binary search trees</li>
  <li>Abstractions (fold, map, filter)</li>
  <li>Graphs</li>
</ul>

<p>The lecture portions, which in-class students watch on their own time, can be found for free as a two-part MOOC on edX (<a href="https://www.edx.org/course/how-code-simple-data-ubcx-htc1x">part 1</a> &amp; <a href="https://www.edx.org/course/how-code-complex-data-ubcx-htc2x">part 2</a>).</p>

<h3 id="approaches-to-taing-and-lessons-learned">Approaches to TA‚Äôing and lessons learned</h3>

<p>During my time as a teaching assistant for CPSC 110, I learned some valuable lessons about education, and thought a lot about ways to teach effectively.</p>

<h4 id="1-its-about-them-not-you">1. It‚Äôs about them, not you</h4>

<p>Not all teaching methods will work for students. It‚Äôs very important to understand and acknowledge individual learning styles, and do your best to cater to them.</p>

<p>Because of the uncommon choice of language for an introductory CS class, even students with prior programming experience struggled to grasp the concepts when put into a functional programming paradigm. However, I noticed that this seemed to <mark>level the playing field</mark> between programming beginners and veterans in terms of succeeding in the course.</p>

<p>To cater to both types of students, I made sure to observe the <mark>vocabulary</mark> students would use when describing their solutions during labs, and further probe to understand their background. For example, many students would use terms like ‚Äúvariables‚Äù, ‚Äúparameters‚Äù, or ‚Äúdeclare‚Äù in the beginning if they had prior experience.</p>

<p>It‚Äôs important as a TA to be able to gauge a student‚Äôs knowledge quickly, so explanations can be tailored to a specific student. With experienced students, I focussed on drawing parallels between Racket and the language they‚Äôve used before. With beginners, I made sure to use analogies to real-life situations, and explain pictorially (I find that those are helpful for understanding program execution).</p>

<p><img src="/assets/images/experience/ta-diagrams.JPG" alt="diagrams for the bubble lab" />
<span class="caption">Using diagrams to explain list manipulation</span></p>

<p>In my TA evaluations, many students have given me good feedback on using diagrams to explain concepts; by using diagrams and explaining verbally while drawing and writing down key concepts, this appeals to both auditory and visual learners. After explaining the main ideas, I let my students <mark>experiment</mark> with the new approach on their own as I move on to the next students.</p>

<h4 id="2-learning-means-vulnerability">2. Learning means vulnerability</h4>

<p>Especially in Computer Science, <a href="https://en.wikipedia.org/wiki/Impostor_syndrome">imposter syndrome</a> is prominent in school, academia, and industry. There are always students who seem to be ‚Äúnaturals‚Äù at Computer Science - they stay ahead of course material, finish three-hour labs an hour early, have personal projects, and just seem to <em>get</em> CS.</p>

<p>It can be very discouraging for students to struggle for a long time, but witness their peer complete the same work in minutes. When you‚Äôre in that situation, it‚Äôs hard to recognize that their peer may have reviewed the material beforehand, may have had prior experience, may have taken classes on the topic, or a million other factors.</p>

<p>Imposter syndrome comes with feeling like you‚Äôll never be as good as these ‚ÄúCS gods‚Äù, no matter how much work you put in. This greatly affects a person‚Äôs ability to learn: for fear of being wrong, you ask less questions, stop experimenting, and become afraid to try new things. And this is really really <em>really</em> bad ‚Äì these are the things learners must do to grow and improve.</p>

<p>As a TA, it was my job to make all students feel emotionally and psychologically safe. I admit that I, too, have struggled with imposter syndrome on many occasions, and still do. However, this puts me in a position to empathize and offer solutions that have worked in my experience. Students have to feel <mark>empowered to take risks</mark>, and understand that <mark>failure is okay</mark>.</p>

<p>When asking questions, I noticed that many students would become nervous when errors appeared while showing me, or if something didn‚Äôt work as they intended. I emphasize that these are totally normal. Sometimes, I tell them about all the compile errors I ran into on my assignment the other day, and laugh along with them. Then, I direct their attention to reading the error together with them, and working out possible solutions by dissecting the messages.</p>

<p>By doing so, I put the focus on <mark>possible solutions</mark> instead of their capabilities or skills. I make sure they understand that errors and mistakes are totally normal (and more common than they think!) so that they‚Äôre never afraid to just <mark>keep trying</mark>.</p>

<h4 id="3-passion-goes-a-long-way">3. Passion goes a long way</h4>

<blockquote>
  <p>Racket and CPSC 110 are useless. You don‚Äôt use these in real life.</p>
</blockquote>

<p>I‚Äôve heard this said so many times, often in the first couple labs. It‚Äôs true that Racket isn‚Äôt used in most software shops, but I‚Äôve used the concepts I learned in this class more times than I can count. My passion to share this has brought me to always be on the lookout for opportunities to talk about the importance of 110 concepts.</p>

<p>When students see a TA being enthusiastic, it‚Äôs easier for them to also gain an interest in the topic. If the TA seems bored, they‚Äôll think less of the topic and possibly put less effort into learning. Professors are may seem unapproachable to many students: their time is limited, with how large the classes are, and they may also seem intimidating. Teaching Assistants are most likely the most common interaction a student has with the course, so it‚Äôs very important that a TA conveys interest in the subject they are teaching.</p>

<p>To be a great teacher, you have to have <mark>genuine passion</mark>. Passion is contagious!</p>

<h4 id="4-dont-be-afraid-to-say-i-dont-know">4. Don‚Äôt be afraid to say ‚ÄúI don‚Äôt know‚Äù</h4>

<p>When I first starting teaching, I was afraid to lose credibility by not having all the answers, but further along, I realize that sometimes, it‚Äôs better to be honest and just admit that you don‚Äôt know, but you‚Äôll get back to them. Obviously, you can‚Äôt always not have the answers, but it‚Äôs okay to show vulnerability once in a while.</p>

<p>By admitting that you aren‚Äôt perfect and also make mistakes, we build a <mark>stronger relationship</mark> with the student. And it‚Äôs also a great reminder that <mark>as teachers, we are also still learners</mark>.</p>

<hr />

<p>In teaching others, I‚Äôve also grown immensely.</p>

<p>Being able to write code takes a set of skills, but explaining it to another is a different skillset as well. <mark>Communication</mark> is an essential part of engineering; as part of a team, I‚Äôm always required to listen and understand others, as well as present my ideas and contributions.</p>

<p>I‚Äôve also improved my ability to <mark>read and understand others' code</mark> ‚Äì a necessary part of working in any team. Dissecting another person‚Äôs implementation has actually taught me different approaches to problems.</p>

<p>Being a teaching assistant is difficult and frustrating at times, but the lessons learned from doing so and the relationships I‚Äôve built over the years make it so worth it.</p>

<p>I‚Äôm looking forward to new approaches as a Teaching Assistant for CPSC 304, as well as using my experiences to better student education. Onwards to more growth and learning!</p>
:ET